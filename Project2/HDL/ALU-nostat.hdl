// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU-nostat.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not i.e. 1's complement
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not i.e. 1's complement
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not i.e. 1's complement

CHIP ALU-nostat {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // bitwise not (1's complement) the x input?
        zy, // zero the y input?
        ny, // bitwise not (1's complement) the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // bitwise not (1's complement) the out output?


    OUT 
        out[16]; // 16-bit output

    PARTS:        
    /*
        Rengang (Angelo) Yang
        CSCE 312 Section 503
        UIN: 526009738
    */

    //handles zx (zeroes out x)
    Mux16(a=x, b=false, sel=zx, out=xClear);
    //handles nx (negates x)
    Not16(in=xClear, out=notX);
    // chooses negation or not negation.
    Mux16(a=xClear, b=notX, sel=nx, out=xDone);


    //handles zy
    Mux16(a=y, b=false, sel=zy, out=yClear);
    // handles ny (negates y)
    Not16(in=yClear, out=notY);
    // chooses negation or not negation.
    Mux16(a=yClear, b=notY, sel=ny, out=yDone);



    // f compute out = x + y (if 1) or x & y (if 0)
    Add16(a=xDone, b=yDone, out=addXY);
    And16(a=xDone, b=yDone, out=andXY);
    Mux16(a=andXY, b=addXY, sel=f, out=fDone);

    // handles no. chooses between the negated or not negated.
    Not16(in=fDone, out=notfDone);
    Mux16(a=fDone, b=notfDone, sel=no, out=out);
}